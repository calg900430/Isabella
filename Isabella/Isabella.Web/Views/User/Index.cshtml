@*
    Vista para mostrar los usuarios administradores disponibles
*@

@*Establece que objeto va a recibir la View, ViewData me permite Bindear entre
    el controlador y la vista, uso esta forma, para no poner texto explicito, así si cambio aquí
    me cambiara en donde quiera que aparezca el key del diccionario referenciado*@
@model List<Isabella.Web.ViewModels.UsersViewModel.GetUserAdminViewModel>

@{
    ViewData["Title"] = "Usuarios Administradores";
    ViewData["Image"] = "Imagen";
    ViewData["FirstName"] = "Nombre";
    ViewData["LastName"] = "Apellidos";
    ViewData["Email"] = "Correo Electrónico";
}
<hr />
@*Pone el Titulo que establecimos en la coleccion ViewData desde el controlador*@
<h2>@ViewData["Title"]</h2>
@*Se crea un enlace del tipo botón usando las clases de Boostrap *@
<p>
    <a asp-action="Create" class="btn btn-primary">Crear Usuario Administrador</a>
</p>
    <div class="row">
        <div class="col-md-12">
            @*Se crea una tabla para mostrar los productos*@
            <table class="table">
                @*Se crean las columnas y se le pone el nombre a cada una*@
                <thead>
                    <tr>
                        <th width="4px">
                            @ViewData["FirstName"]
                        </th>
                        <th width="4px">
                            @ViewData["LastName"]
                        </th>
                        <th width="4px">
                            @ViewData["Email"]
                        </th>
                        <th></th>
                    </tr>
                </thead>
                @*Se crean las filas que contienen los elementos de cada columna que
                en este caso son los datos de los usuarios admins*@
                <tbody>
                    @foreach (var item in Model)
                    {
                    <tr>
                        @if (!string.IsNullOrEmpty(item.FirstName))
                        {
                            <td>@Html.DisplayFor(model => item.FirstName)</td>
                        }
                        else
                        {
                            <td>Nombre No Disponible</td>
                        }
                        @if (!string.IsNullOrEmpty(item.LastName))
                        {
                            <td>@Html.DisplayFor(model => item.LastName)</td>
                        }
                        else
                        {
                            <td>Apellidos No Disponibles</td>
                        }
                        <td>@Html.DisplayFor(model => item.Email)</td>
                        @*Se crean los botones Edit, Delete y Details para cada producto*@
                        <td id="@item.Id">
                            <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-warning"><i class="fa fa-edit" aria-hidden="true"></i></a>
                            <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-info"><i class="fa fa-info" aria-hidden="true"></i></a>
                            <a id="buttomdelete" asp-route-id="@item.Id" class="btn btn-danger"><i class="fa fa-trash" aria-hidden="true"></i></a>
                            <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-secondary"><i class="fa fa-info" aria-hidden="true"></i></a>
                            <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-success"><i class="fa fa-info" aria-hidden="true"></i></a>
                        </td>
                    </tr>
                     }
                </tbody>
            </table>
        </div>
    </div>




