@*
    Vista para mostrar los productos disponibles
*@

@*Establece que objeto va a recibir la View, ViewData me permite Bindear entre
    el controlador y la vista, uso esta forma, para no poner texto explicito, así si cambio aquí
    me cambiara en donde quiera que aparezca el key del diccionario referenciado*@
@model List<Isabella.Web.ViewModels.ProductViewModel.GetProductViewModel>

@{
    ViewData["Title"] = "Productos";
    ViewData["Image"] = "Imagen";
    ViewData["Name"] = "Nombre";
    ViewData["Price"] = "Precio";
    ViewData["Available"] = "Disponible?";
    Layout = "~/Views/Shared/AdminLTE/_Layout.cshtml";
}

<div class="product-status mg-b-30" style="padding-top:75px">
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                <div class="product-status-wrap">
                    <h4>Productos</h4>
                    <div class="add-product">
                        <a asp-action="Create" class="btn btn-primary">Crear Producto</a>
                    </div>
                    <table>
                        <tr>
                            <th>Imagen</th>
                            <th>Nombre</th>
                            <th>Disponible?</th>
                            <th>Stock</th>
                            <th>Precio</th>
                            <th>Opciones</th>
                        </tr>
                        @foreach (var item in Model)
                         {
                              <tr>
                                  <td>
                                      @*Convierte el array byte en una imagen*@
                                      @if(item.GetAllImagesProducts.Any() == true)
                                       {
                                          <img class="ImageProducts" src="data:imge;base64,@System.Convert.ToBase64String(item.GetAllImagesProducts[0].Image)" ,
                                          style="width:150px;height:150px;max-width: 100%; height: auto;" />
                                       }
                                       else
                                       {
                                          <!--Poner Imagen de Producto No disponible-->
                                          <b>Imagen No Disponible</b>
                                       }
                                  </td>
                                 <td>@Html.DisplayFor(model => item.Name)</td>

                                 @if (item.IsAvailabe)
                                  {
                                    <td>
                                        Sí
                                    </td>
                                  }
                                  else
                                  {
                                    <td>
                                        No
                                    </td>
                                  }
                                  <td>@Html.DisplayFor(model => item.Stock)</td>
                                  <td>@Html.DisplayFor(model => item.Price)</td>
                                  <td id="@item.Id">
                                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-warning"><i class="fa fa-edit" aria-hidden="true"></i></a>
                                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-info"><i class="fa fa-info" aria-hidden="true"></i></a>
                                    <a id="buttomdelete" asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger"><i class="fa fa-trash" aria-hidden="true"></i></a>
                                  </td>
                            </tr>
                         }                       
                    </table>
                    <div class="custom-pagination">
                        <ul class="pagination">
                            <li class="page-item"><a class="page-link" href="#">Previous</a></li>
                            <li class="page-item"><a class="page-link" href="#">1</a></li>
                            <li class="page-item"><a class="page-link" href="#">2</a></li>
                            <li class="page-item"><a class="page-link" href="#">3</a></li>
                            <li class="page-item"><a class="page-link" href="#">Next</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@*Ventanas Modal de confirmación de borrar producto*@
<div id="confirmDelete" class="modal fade">
    <div class="modal-dialog sidebar-dark-primary" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Borrar</h5>
            </div>
            <div class="modal-body" style="text-align:center">
                <p>¿Desea eliminar el producto?</p>
                <hr />
                <div class="fa-2x">
                    <i id="iconWaitDelete" class="fas fa-spinner fa-spin" style="display:none"></i>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="btnYesDelete">Sí</button>
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" id="btnNoDelete">No</button>
            </div>
        </div>
    </div>
</div>

@*Ventanas Modal de respuesta del servidor al borrar el producto*@
<div id="responseDelete" class="modal fade">
    <div class="modal-dialog sidebar-dark-primary" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Error</h5>
            </div>
            <div class="modal-body">
                <p id="messageModalResponseDelete"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" id="btnCloseResponseDelete">Ok</button>
            </div>
        </div>
    </div>
</div>

@section Scripts
    {
    @*Script para el manejo de la ventana modal*@
    <script type="text/javascript">
        $(document).ready(function () {
            let id = 0;
            let url = getUriServer() + 'product/delete/';

            //Evento Click del Botón Delete(Muestra la ventana Modal de eliminar el producto)
            $('a[id*=buttomdelete]').click(function (e) {
                e.preventDefault();
                id = $(this).parent()[0].id
                $("#confirmDelete").modal({ backdrop: 'static', keyboard: true }, 'show');
                return false;
            });

            //Evento Click del Botón No(Cierra la ventana Modal de eliminar el producto)
            $('#btnNoDelete').click(function (e) {
                e.preventDefault();
                $("#confirmDelete").modal('hide');
                return false;
            });

            //Evento Click del Botón Cerrar(Cierra la ventana Modal de eliminar el producto)
            $('#btnCloseModalConfirmDelete').click(function (e) {
                e.preventDefault();
                $("#confirmDelete").modal('hide');
                return false;
            });

            //Evento Click del Botón Cerrar(Cierra la ventana Modal de respuesta del servidor)
            $('#btnCloseModalResponseDelete').click(function (e) {
                e.preventDefault();
                $("#responseDelete").modal('hide');
                return false;
            });

            //Evento Click del Botón Cerrar(Cierra la ventana Modal de respuesta del servidor)
            $('#btnCloseResponseDelete').click(function (e) {
                e.preventDefault();
                $('#responseDelete').modal('hide');
                return false;
            });

            //Evento Click del Botón Sí(Manda a eliminar un producto)
            $('#btnYesDelete').click(async function (e) {
                try {
                    e.preventDefault();
                    await WaitResponseServer()
                    var responseService = await DeleteProduct(id);

                    if (responseService.status == 200) {
                        $('#confirmDelete').modal('hide');
                        window.location.href = '/Product';
                        await HideWaitResponseServer();
                        return false;
                    }
                    else if (responseService.status == 404) {
                        let response = await responseService.json();
                        let message = response.message;
                        $('#messageModalResponseDelete').text(message)
                        $('#confirmDelete').modal('hide');
                        $('#responseDelete').modal({ backdrop: 'static', keyboard: true }, 'show');
                        await HideWaitResponseServer();
                        return false;
                    }
                    else {
                        $('#messageModalResponseDelete').text("Se originó un error desconocido.");
                        $('#confirmDelete').modal('hide');
                        $('#responseDelete').modal({ backdrop: 'static', keyboard: true }, 'show');
                        await HideWaitResponseServer();
                        return false;
                    }
                }
                catch (error) {
                    $('#confirmDelete').modal('hide');
                    $('#responseDelete').modal({ backdrop: 'static', keyboard: true }, 'show');
                    $('#messageModalResponseDelete').text(error.message);
                    await HideWaitResponseServer();
                    return false;
                }
            });

            //Mostrar icono de espera y bloquear botones de la modal.
            async function WaitResponseServer() {
                $('#messageModalResponseDelete').text("");
                $('#iconWaitDelete').show();
                $('#btnYesDelete').prop("disabled", true);
                $('#btnCloseModalConfirmDelete').prop("disabled", true);
                $('#btnNoDelete').prop("disabled", true);
            }

            //Ocultar icono de espera y desbloquear botones de la modal.
            async function HideWaitResponseServer() {
                $('#iconWaitDelete').hide();
                $('#btnYesDelete').prop("disabled", false);
                $('#btnCloseModalConfirmDelete').prop("disabled", false);
                $('#btnNoDelete').prop("disabled", false);
            }

            //Función para eliminar el producto
            async function DeleteProduct(id) {
                //Manda a eliminar el producto
                let responseService = await fetch(url + "?id=" + id, {
                    method: 'DELETE',
                    headers:
                    {
                        'Content-Type': 'application/json'
                    },
                });
                return responseService
            }
        });
    </script>
}





